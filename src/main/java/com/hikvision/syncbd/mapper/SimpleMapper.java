package com.hikvision.syncbd.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import com.hikvision.syncbd.model.CrossingInfo;
import com.hikvision.syncbd.model.LaneInfo;
import com.hikvision.syncbd.model.VehiclePass;
import com.hikvision.syncbd.model.VehicleViolation;

/**
 * @author chenhuaming 2016-1-11
 * 
 */

public interface SimpleMapper {

	@Select("select CROSSING_ID, ALTITUDE, CASCADE_ID, CONTROL_UNIT_ID, CONTROLUNIT_INDEXCODE, CROSSING_MODE, CROSSING_TYPE, ENABLE_RELATE, FRONT_TYPE, CROSSING_INDEX_CODE, INTERCITY, INTERNAL_CODE, JCCROSSINGINDEXCODE, LANE_NUM, LATITUDE, LONGITUDE, CROSSING_NAME, PHOTO, RELATED_CAMERA_NAME, RELATED_CAMERA_PATH, UPDATETIME, CROSSING_SERVER_ID from BMS_CROSSING_INFO order by  CROSSING_ID")
	List<CrossingInfo> getAllCrossingInfo();

	@Select("select LANE_ID, CASCADE_ID, CROSSINGCAMERAID, DIRECTION_NAME, DIRECTION_NO, ENABLE_RELATE, LANE_INDEX_CODE, DIRECTTYPE, JCLANENO, LANE_NUMBER, LANE_TYPE, LANE_NAME, RELATED_CAMERA_INDEX_CODE, RELATED_CAMERA_NAME, RELATED_CAMERA_PATH, SPEED_LIMIT, TRIGGER_TYPE, UPDATETIME, CROSSING_ID from BMS_LANE_INFO order by LANE_ID")
	List<LaneInfo> getAllLaneInfo();
	
	@Select("select count(*)from ${tableName}")
	int getTotalNumber( @Param("tableName")String tableName);
	

//	@Select("select VEHICLE_ID, VEHICLE_LOGO, VEH_COLOR_DEPTH, CROSSING_ID, IMAGE_SERVER_ID, LANE_ID, PASS_TIME, PIC_ABBREVIATE, PIC_PLATE, PIC_VEHICLE, PLATE_COLOR, PLATE_INFO, PLATE_TYPE, UPDATE_TIME, VEHICLE_AUDIT, VEHICLE_COLOR, VEHICLE_INDEX, VEHICLE_MODEL, VEHICLE_SPEED, VEHICLE_STATE, VEHICLE_SUBLOGO, VEHICLE_SUNVISOR, VEHICLE_TYPE from BMS_VEHICLE_PASS where VEHICLE_ID=#{id} ")
//	VehiclePass getVehiclePassById(Long id);
//
//	@Select("select VEHICLE_VIOLATION_ID, ALARM_ACTION, VEHICLE_LOGO, VEH_COLOR_DEPTH, CROSSING_ID, IMAGE_SERVER_ID, LANE_ID, ALARM_TIME, PIC_ABBREVIATE, PIC_PLATE, PIC_VEHICLE_1, PIC_VEHICLE_2, PIC_VEHICLE_3, PIC_VEHICLE_4, PLATE_COLOR, PLATE_INFO, PLATE_TYPE, UPDATE_TIME, VEHICLE_AUDIT, VEHICLE_COLOR, VEHICLE_ID, VEHICLE_INDEX, VEHICLE_MODEL, VEHICLE_SPEED, VEHICLE_STATE, VEHICLE_SUBLOGO, VEHICLE_SUNVISOR, VEHICLE_TYPE from BMS_VEHICLE_VIOLATION where VEHICLE_VIOLATION_ID=#{id}")
//	VehicleViolation getVehicleViolationById(Long id);

	@Update("update BMS_VEHICLE_PASS set pic_vehicle=#{0} where VEHICLE_INDEX=#{1}")
	void updateVehiclePass(String url, String index);

	@Update("update BMS_VEHICLE_VIOLATION set pic_vehicle_1=#{0} where VEHICLE_INDEX=#{1}")
	void updateVehicleViolation(String url, String index);
	
	@Select("select VEHICLE_ID, VEHICLE_LOGO, VEH_COLOR_DEPTH, CROSSING_ID, IMAGE_SERVER_ID, LANE_ID, PASS_TIME, PIC_ABBREVIATE, PIC_PLATE, PIC_VEHICLE, PLATE_COLOR, PLATE_INFO, PLATE_TYPE, UPDATE_TIME, VEHICLE_AUDIT, VEHICLE_COLOR, VEHICLE_INDEX, VEHICLE_MODEL, VEHICLE_SPEED, VEHICLE_STATE, VEHICLE_SUBLOGO, VEHICLE_SUNVISOR, VEHICLE_TYPE from BMS_VEHICLE_PASS where VEHICLE_INDEX=#{index}")
	VehiclePass getVehiclePassByIndex(String index);

	@Select("select VEHICLE_VIOLATION_ID, ALARM_ACTION, VEHICLE_LOGO, VEH_COLOR_DEPTH, CROSSING_ID, IMAGE_SERVER_ID, LANE_ID, ALARM_TIME, PIC_ABBREVIATE, PIC_PLATE, PIC_VEHICLE_1, PIC_VEHICLE_2, PIC_VEHICLE_3, PIC_VEHICLE_4, PLATE_COLOR, PLATE_INFO, PLATE_TYPE, UPDATE_TIME, VEHICLE_AUDIT, VEHICLE_COLOR, VEHICLE_ID, VEHICLE_INDEX, VEHICLE_MODEL, VEHICLE_SPEED, VEHICLE_STATE, VEHICLE_SUBLOGO, VEHICLE_SUNVISOR, VEHICLE_TYPE from BMS_VEHICLE_VIOLATION where VEHICLE_INDEX=#{index}")
	VehicleViolation getVehicleViolationByIndex(String index);

}
